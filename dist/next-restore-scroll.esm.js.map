{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["import { useEffect } from 'react'\r\nimport Router from 'next/router'\r\n\r\n/**\r\n * Restores the scroll position of every element selector passed as the second argument, in an array,\r\n * or a single element selector passed as a string. If the third argument is true, querySelectorAll\r\n * will be used instead of querySelector, and multiple elements found with the same selector shall\r\n * have their scroll position restored.\r\n * @param router {object} - The router object passed from the main app.js component\r\n * @param elementSelectors {string|string[]} - A single element selector string, or an array of element selector strings\r\n * @param selectMultipleOfElement {boolean} - Default: false. Select multiple elements from same selector? Default is false\r\n * @param restoreOnNew {boolean} - Default: true. When loading page with scroll position without using back/forward, reset position\r\n */\r\nexport default function restoreScrollPosition (router, elementSelectors, selectMultipleOfElement = false, restoreOnNew = false) {\r\n  const prefix = 'next-restore-scroll:'\r\n  let selectors\r\n  selectors = Array.isArray(elementSelectors) ? elementSelectors : [elementSelectors]\r\n\r\n  // Pass each selector and element as `func` arguments\r\n  function forEachElement (func) {\r\n    selectors.map((selector, count) => {\r\n      if (!selectMultipleOfElement) {\r\n        func(selector, document.querySelector(selector))\r\n      } else {\r\n        [...document.querySelectorAll(selector)].forEach(element => {\r\n          func(`${selector}_${count}`, element)\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  // Save each scroll position to sessionStorage\r\n  function saveScrollPos (url) {\r\n    const scrollPositions = {}\r\n    forEachElement((selector, element) => {\r\n      scrollPositions[selector] = {\r\n        x: element.scrollLeft,\r\n        y: element.scrollTop\r\n      }\r\n    })\r\n    sessionStorage.setItem(prefix + url, JSON.stringify(scrollPositions))\r\n  }\r\n\r\n  // Restore each scroll position from sessionStorage\r\n  function restoreScrollPos (url) {\r\n    const scrollPositions = JSON.parse(sessionStorage.getItem(prefix + url))\r\n    if (scrollPositions) {\r\n      forEachElement((selector, element) => {\r\n        const scrollPos = scrollPositions[selector]\r\n        if (scrollPos) {\r\n          disableSmoothScrollCallback(element, () => {\r\n            element.scrollTo(scrollPos.x, scrollPos.y)\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  // Scroll all elements to top\r\n  function scrollAllToTop () {\r\n    forEachElement((selector, element) => {\r\n      disableSmoothScrollCallback(element, () => {\r\n        element.scrollTo(0, 0)\r\n      })\r\n    })\r\n  }\r\n\r\n  // Disable smooth scroll (if enabled), run callback, re-enable (if previously enabled)\r\n  function disableSmoothScrollCallback (element, func) {\r\n    const smoothScroll = window.getComputedStyle(element).getPropertyValue('scroll-behavior')\r\n    if (smoothScroll !== 'auto') {\r\n      element.style.scrollBehavior = 'auto'\r\n      func()\r\n      element.style.scrollBehavior = smoothScroll\r\n    } else {\r\n      func()\r\n    }\r\n  }\r\n\r\n  // Run when route changes\r\n  useEffect(() => {\r\n    if ('scrollRestoration' in window.history) {\r\n      let shouldRestoreScroll = false\r\n      window.history.scrollRestoration = 'manual'\r\n\r\n      if (restoreOnNew) {\r\n        restoreScrollPos(router.asPath)\r\n      }\r\n\r\n      const onBeforeUnload = event => {\r\n        saveScrollPos(router.asPath)\r\n        delete event['returnValue']\r\n      }\r\n\r\n      const onRouteChangeStart = () => {\r\n        saveScrollPos(router.asPath)\r\n      }\r\n\r\n      const onRouteChangeComplete = url => {\r\n        if (shouldRestoreScroll) {\r\n          shouldRestoreScroll = false\r\n          restoreScrollPos(url)\r\n        } else {\r\n          scrollAllToTop()\r\n        }\r\n      }\r\n\r\n      // Apply to router\r\n      window.addEventListener('beforeunload', onBeforeUnload)\r\n      Router.events.on('routeChangeStart', onRouteChangeStart)\r\n      Router.events.on('routeChangeComplete', onRouteChangeComplete)\r\n      Router.beforePopState(() => {\r\n        shouldRestoreScroll = true\r\n        return true\r\n      })\r\n\r\n      // Clean up\r\n      return () => {\r\n        window.removeEventListener('beforeunload', onBeforeUnload)\r\n        Router.events.off('routeChangeStart', onRouteChangeStart)\r\n        Router.events.off('routeChangeComplete', onRouteChangeComplete)\r\n        Router.beforePopState(() => true)\r\n      }\r\n    }\r\n  }, [router])\r\n}\r\n"],
  "mappings": "AAAA;AACA;AAYe,+BAAgC,QAAQ,kBAAkB,0BAA0B,OAAO,eAAe,OAAO;AAC9H,QAAM,SAAS;AACf,MAAI;AACJ,cAAY,MAAM,QAAQ,oBAAoB,mBAAmB,CAAC;AAGlE,0BAAyB,MAAM;AAC7B,cAAU,IAAI,CAAC,UAAU,UAAU;AACjC,UAAI,CAAC,yBAAyB;AAC5B,aAAK,UAAU,SAAS,cAAc;AAAA,aACjC;AACL,SAAC,GAAG,SAAS,iBAAiB,WAAW,QAAQ,aAAW;AAC1D,eAAK,GAAG,YAAY,SAAS;AAAA;AAAA;AAAA;AAAA;AAOrC,yBAAwB,KAAK;AAC3B,UAAM,kBAAkB;AACxB,mBAAe,CAAC,UAAU,YAAY;AACpC,sBAAgB,YAAY;AAAA,QAC1B,GAAG,QAAQ;AAAA,QACX,GAAG,QAAQ;AAAA;AAAA;AAGf,mBAAe,QAAQ,SAAS,KAAK,KAAK,UAAU;AAAA;AAItD,4BAA2B,KAAK;AAC9B,UAAM,kBAAkB,KAAK,MAAM,eAAe,QAAQ,SAAS;AACnE,QAAI,iBAAiB;AACnB,qBAAe,CAAC,UAAU,YAAY;AACpC,cAAM,YAAY,gBAAgB;AAClC,YAAI,WAAW;AACb,sCAA4B,SAAS,MAAM;AACzC,oBAAQ,SAAS,UAAU,GAAG,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAQlD,4BAA2B;AACzB,mBAAe,CAAC,UAAU,YAAY;AACpC,kCAA4B,SAAS,MAAM;AACzC,gBAAQ,SAAS,GAAG;AAAA;AAAA;AAAA;AAM1B,uCAAsC,SAAS,MAAM;AACnD,UAAM,eAAe,OAAO,iBAAiB,SAAS,iBAAiB;AACvE,QAAI,iBAAiB,QAAQ;AAC3B,cAAQ,MAAM,iBAAiB;AAC/B;AACA,cAAQ,MAAM,iBAAiB;AAAA,WAC1B;AACL;AAAA;AAAA;AAKJ,YAAU,MAAM;AACd,QAAI,uBAAuB,OAAO,SAAS;AACzC,UAAI,sBAAsB;AAC1B,aAAO,QAAQ,oBAAoB;AAEnC,UAAI,cAAc;AAChB,yBAAiB,OAAO;AAAA;AAG1B,YAAM,iBAAiB,WAAS;AAC9B,sBAAc,OAAO;AACrB,eAAO,MAAM;AAAA;AAGf,YAAM,qBAAqB,MAAM;AAC/B,sBAAc,OAAO;AAAA;AAGvB,YAAM,wBAAwB,SAAO;AACnC,YAAI,qBAAqB;AACvB,gCAAsB;AACtB,2BAAiB;AAAA,eACZ;AACL;AAAA;AAAA;AAKJ,aAAO,iBAAiB,gBAAgB;AACxC,aAAO,OAAO,GAAG,oBAAoB;AACrC,aAAO,OAAO,GAAG,uBAAuB;AACxC,aAAO,eAAe,MAAM;AAC1B,8BAAsB;AACtB,eAAO;AAAA;AAIT,aAAO,MAAM;AACX,eAAO,oBAAoB,gBAAgB;AAC3C,eAAO,OAAO,IAAI,oBAAoB;AACtC,eAAO,OAAO,IAAI,uBAAuB;AACzC,eAAO,eAAe,MAAM;AAAA;AAAA;AAAA,KAG/B,CAAC;AAAA;",
  "names": []
}
